给定一个字符串，找出不含有重复字符的最长子串的长度。
示例 1:
输入: "abcabcbb"
输出: 3 
解释: 无重复字符的最长子串是 "abc"，其长度为 3。

示例 2:
输入: "bbbbb"
输出: 1
解释: 无重复字符的最长子串是 "b"，其长度为 1。

示例 3:
输入: "pwwkew"
输出: 3
解释: 无重复字符的最长子串是 "wke"，其长度为 3。
     请注意，答案必须是一个子串，"pwke" 是一个子序列 而不是子串。
     
//////////////////////////////////////////////////////////////////////////////////////////////////////自己的算法
class Solution 
{
public:
    int lengthOfLongestSubstring(string s) 
    {
        if(s.empty())
            return 0;
        int p1=0;
        int p2=0;
        int max=1;     
        while(p2<s.size())
        {
            p2=p1; 
            char ch[256]={0};   
            while(p2<s.size())
            {
                if(ch[s[p2]]==0)
                    ch[s[p2]]=1;
                else if(ch[s[p2]]==1)                    
                    break;
                
                p2++;
            }
            if((p2-p1)>max)
                max=p2-p1;
            
            p1++;
        }
        return max;
        
    }
};
/////////////////////////////////////////////////////////////////////////////////////////////////官网参考解析1

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> dict(256, -1);
        int maxLen = 0, start = -1;
        for (int i = 0; i != s.length(); i++) {
            if (dict[s[i]] > start)
                start = dict[s[i]];
            dict[s[i]] = i;
            maxLen = max(maxLen, i - start);
        }
        return maxLen;
    }
};
/////////////////////////////////////////////////////////////////////////////////////////////////其他参考解析2
注意下面这张方法用char ch[256]，因为记录的是字母在字符串中的下标，当字符串较长时，可能出现溢出，char表示0~127，
当字符串大于128时，char最多也只能加到127。所以可以选择用int来定义，或者用第一种自己写的方法，char只记录0或1，是否出现过该字母，不用记录下标。
class Solution 
{
public:
    int lengthOfLongestSubstring(string s) 
    {
        int ch[256];
        for(int i=0;i<256;i++)
            ch[i]=-1;
        int start=0;
        int maxLength=0;
        int size=s.size();
        for(int i=0;i<size;i++)
        {
            if(ch[s[i]]>=start)
            {
                maxLength=max(i-start,maxLength);
                start=ch[s[i]]+1;
            }
            
            ch[s[i]]=i;
        }
        return max(size-start,maxLength);
        //return start;
        //return maxLength;
        
    }
};
