2. Add Two Numbers
给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。
你可以假设除了数字 0 之外，这两个数字都不会以零开头。
示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
//////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution 
{
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        int sum=0;
        int carry=0;
        ListNode* temp=new ListNode(0);
        ListNode* pHead=temp;
        while(l1!=nullptr||l2!=nullptr)
        {
            if(l1==nullptr)
                sum=l2->val+carry;
            else if(l2==nullptr)
                sum=l1->val+carry;
            else
                sum=l1->val+l2->val+carry;
            carry=sum/10;
            temp->next=new ListNode(sum%10);
            temp=temp->next;
            if(l1!=nullptr)
                l1=l1->next;
            if(l2!=nullptr)
                l2=l2->next;            
        }
        if(carry==1)
            temp->next=new ListNode(carry);
        
        return pHead->next;
    }
};
//////////////////////////////////////////////////////////////////////////////////////////////////////总结
复杂度分析
时间复杂度：O(\max(m, n))O(max(m,n))，假设 mm 和 nn 分别表示 l1l1 和 l2l2 的长度，上面的算法最多重复 \max(m, n)max(m,n) 次。
空间复杂度：O(\max(m, n))O(max(m,n))， 新列表的长度最多为 \max(m,n) + 1max(m,n)+1。

自己想的方法是把两个数拼起来之后相加，再把结果拆开，数很大的时候可能超过int表示范围，
应该使用按位相加，并进位的这种方法。

记一下这种写法int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;

//////////////////////////////////////////////////////////////////////////////////////////////////////参考解析
ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
    ListNode preHead(0), *p = &preHead;
    int extra = 0;
    while (l1 || l2 || extra) {
        int sum = (l1 ? l1->val : 0) + (l2 ? l2->val : 0) + extra;
        extra = sum / 10;
        p->next = new ListNode(sum % 10);
        p = p->next;
        l1 = l1 ? l1->next : l1;
        l2 = l2 ? l2->next : l2;
    }
    return preHead.next;
}
