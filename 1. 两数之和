1. Two Sum
给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。

你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
/////////////////////////////////////////////////////////////////////////////////////////自己的算法
class Solution 
{
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        vector<int> vec;
        int size=nums.size();
        //if(size<2)
            //return vec;
               
        for(int i=0;i<size;++i)
        {
            for(int j=i+1;j<size;++j)
            {
                if((nums[j]+nums[i])==target)
                {
                    vec.push_back(i);
                    vec.push_back(j);
                    return vec;
                }
            } 
        }
               
        return vec;
                        
    }
};
/////////////////////////////////////////////////////////////////////////////////////////总结
方法一：暴力法（对应自己的算法）
暴力法很简单。遍历每个元素 x，并查找是否存在一个值与 target - x相等的目标元素。
复杂度分析：

时间复杂度：O(n^2)， 对于每个元素，我们试图通过遍历数组的其余部分来寻找它所对应的目标元素，这将耗费 O(n)的时间。因此时间复杂度为 O(n^2)。
空间复杂度：O(1)。 

方法三：一遍哈希表（对应参考解析1）
事实证明，我们可以一次完成。在进行迭代并将元素插入到表中的同时，我们还会回过头来检查表中是否已经存在当前元素所对应的目标元素。
如果它存在，那我们已经找到了对应解，并立即将其返回。
复杂度分析：

时间复杂度：O(n)， 我们只遍历了包含有 n个元素的列表一次。在表中进行的每次查找只花费 O(1)的时间。

空间复杂度：O(n)， 所需的额外空间取决于哈希表中存储的元素数量，该表最多需要存储 n个元素。
/////////////////////////////////////////////////////////////////////////////////////////参考解析1(选这种)
class Solution 
{
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        unordered_map<int, int> hash;
	    vector<int> result;
	    for (int i = 0; i < nums.size(); i++) 
        {
		    int numberToFind = target - nums[i];
		    if (hash.find(numberToFind) != hash.end()) 
            {
			    result.push_back(hash[numberToFind]);
			    result.push_back(i);			
			    return result;
		    }
		    hash[nums[i]] = i;
	    }
	    return result;                        
    }
};
